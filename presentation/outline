Code Crucible: Fueling a refinement of values

COLD OPEN: "I want to show you some code..."
    - what I like about this:
        - compositionality
            - every function is defined entirely by other functions
            - nothing ad-hoc is ever introduced; only a combination of what already exists

        - less hackable
            - without function blocks you're less likely to keep adding lines to a function
            - encouraged to build things that are smaller, simpler, and composable

        - emphasis on language (SICP: Stratified Design)
            - human language is extraordinarily composable and one of our most powerful tools for creating abstractions
            - the encoded representation is perfectly aligned with our high-level mental model of the problem space

    - objections:
        - "so many functions to walk through!"
        - "how do I debug?"
        - "what about performance?"
        - not going to talk about any of that today

    - what I'd like to talk about tonight
        - I didn't always code like this; the values behind it have been slowly refined by many experiences over the years
        - code is not simply good or bad. there are a myriad of properties that software exhibits and our values inform which ones we choose to prioritize
        - I never expected to grapple so much with values as a software engineer
        - I want to share a recent experience that had a huge impact on me

PRICE SERVICE: Legacy Nightmare
    - solo full-stack project
        - consolidate pricing logic into a new price service
        - implement date-based pricing

    - problems
        - poorly defined requirements
        - ad-hoc pricing logic was scattered throughout the entirety of the system (front and back-end)
        - 5+ year old NodeJS system in which quality maintenance had never been prioritized
        - new to the company (i.e. little domain knowledge and unfamiliar codebase)

    - challenges
        - confession: I didn't always write tests
            - much slower due to all the extra mental processing
            - resulted in a lot of regressions during the early stages of the project
            - started writing tests and catching bugs sooner

        - perfect storm of tech debt
            - definition of legacy code: untested code
                - most likely because of being hard to test
                - very dangerous to modify code without feedback saying something broke

            - gargantuan functions impossible to understand
            - non-transparent side-effects
            - rampant mixing of concerns
            - in-house framework magic

        - long solo project
            - constantly running into new issues which severely delayed project
            - several all-nighters as I just wanted it to be over
            - very lonely; working near people but not with people

    - response
        - search to understand how code becomes this way
            - heavily influenced by org culture/values
            - learning about values and seeing that my own were misaligned with this company helped be less resentful

        - search for techniques to maintain quality as code evolves
            - digging deeper into FP
                - books (professor frisby's)
                - podcasts (magic read-a-long, corecursive)
                - heroes (brian lonsdorf, runar bjarnson, bartosz milewski)
            - finding an online community since I didn't work with anyone that shared similar interests

        - search for companies that prioritized quality
            - hello CJ Affiliate!
                - I now had a decent idea of how to define quality, but lacked an effective methodology that helped me stay productive
                - top-down design to the rescue
                    - constant IDE feedback; machine tells me what to do next, I focus on abstraction
                    - end result similar to what I would've normally done, but in way less time PLUS full test coverage

WRAP UP
    - work isn't always what we hope; sometimes it's the worst and tries us in ways we never expected, but we can use these experiences as fuel for our own self-discovery and growth
    - don't go it alone; find a community that shares your values and will support you in digging into your passions
